#include "lut_utils.hpp"
#include "tree_lut.hpp"  // assumes this contains your tree_lut_eval
#include <cstdint>
#include <vector>
#include <cassert>
#include <tfhe/tfhe.h>
#include <tfhe/tfhe_io.h>
#include <iostream>
#include <functional>

const uint8_t T_2[256] = {
    0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0E, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1A, 0x1C, 0x1E,
    0x20, 0x22, 0x24, 0x26, 0x28, 0x2A, 0x2C, 0x2E, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3A, 0x3C, 0x3E,
    0x40, 0x42, 0x44, 0x46, 0x48, 0x4A, 0x4C, 0x4E, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5A, 0x5C, 0x5E,
    0x60, 0x62, 0x64, 0x66, 0x68, 0x6A, 0x6C, 0x6E, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7A, 0x7C, 0x7E,
    0x80, 0x82, 0x84, 0x86, 0x88, 0x8A, 0x8C, 0x8E, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9A, 0x9C, 0x9E,
    0xA0, 0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC, 0xAE, 0xB0, 0xB2, 0xB4, 0xB6, 0xB8, 0xBA, 0xBC, 0xBE,
    0xC0, 0xC2, 0xC4, 0xC6, 0xC8, 0xCA, 0xCC, 0xCE, 0xD0, 0xD2, 0xD4, 0xD6, 0xD8, 0xDA, 0xDC, 0xDE,
    0xE0, 0xE2, 0xE4, 0xE6, 0xE8, 0xEA, 0xEC, 0xEE, 0xF0, 0xF2, 0xF4, 0xF6, 0xF8, 0xFA, 0xFC, 0xFE,
    0x1B, 0x19, 0x1F, 0x1D, 0x13, 0x11, 0x17, 0x15, 0x0B, 0x09, 0x0F, 0x0D, 0x03, 0x01, 0x07, 0x05,
    0x3B, 0x39, 0x3F, 0x3D, 0x33, 0x31, 0x37, 0x35, 0x2B, 0x29, 0x2F, 0x2D, 0x23, 0x21, 0x27, 0x25,
    0x5B, 0x59, 0x5F, 0x5D, 0x53, 0x51, 0x57, 0x55, 0x4B, 0x49, 0x4F, 0x4D, 0x43, 0x41, 0x47, 0x45,
    0x7B, 0x79, 0x7F, 0x7D, 0x73, 0x71, 0x77, 0x75, 0x6B, 0x69, 0x6F, 0x6D, 0x63, 0x61, 0x67, 0x65,
    0x9B, 0x99, 0x9F, 0x9D, 0x93, 0x91, 0x97, 0x95, 0x8B, 0x89, 0x8F, 0x8D, 0x83, 0x81, 0x87, 0x85,
    0xBB, 0xB9, 0xBF, 0xBD, 0xB3, 0xB1, 0xB7, 0xB5, 0xAB, 0xA9, 0xAF, 0xAD, 0xA3, 0xA1, 0xA7, 0xA5,
    0xDB, 0xD9, 0xDF, 0xDD, 0xD3, 0xD1, 0xD7, 0xD5, 0xCB, 0xC9, 0xCF, 0xCD, 0xC3, 0xC1, 0xC7, 0xC5,
    0xFB, 0xF9, 0xFF, 0xFD, 0xF3, 0xF1, 0xF7, 0xF5, 0xEB, 0xE9, 0xEF, 0xED, 0xE3, 0xE1, 0xE7, 0xE5
};

const uint8_t T_3[256] = {
    0x00, 0x03, 0x06, 0x05, 0x0C, 0x0F, 0x0A, 0x09, 0x18, 0x1B, 0x1E, 0x1D, 0x14, 0x17, 0x12, 0x11,
    0x30, 0x33, 0x36, 0x35, 0x3C, 0x3F, 0x3A, 0x39, 0x28, 0x2B, 0x2E, 0x2D, 0x24, 0x27, 0x22, 0x21,
    0x60, 0x63, 0x66, 0x65, 0x6C, 0x6F, 0x6A, 0x69, 0x78, 0x7B, 0x7E, 0x7D, 0x74, 0x77, 0x72, 0x71,
    0x50, 0x53, 0x56, 0x55, 0x5C, 0x5F, 0x5A, 0x59, 0x48, 0x4B, 0x4E, 0x4D, 0x44, 0x47, 0x42, 0x41,
    0xC0, 0xC3, 0xC6, 0xC5, 0xCC, 0xCF, 0xCA, 0xC9, 0xD8, 0xDB, 0xDE, 0xDD, 0xD4, 0xD7, 0xD2, 0xD1,
    0xF0, 0xF3, 0xF6, 0xF5, 0xFC, 0xFF, 0xFA, 0xF9, 0xE8, 0xEB, 0xEE, 0xED, 0xE4, 0xE7, 0xE2, 0xE1,
    0xA0, 0xA3, 0xA6, 0xA5, 0xAC, 0xAF, 0xAA, 0xA9, 0xB8, 0xBB, 0xBE, 0xBD, 0xB4, 0xB7, 0xB2, 0xB1,
    0x90, 0x93, 0x96, 0x95, 0x9C, 0x9F, 0x9A, 0x99, 0x88, 0x8B, 0x8E, 0x8D, 0x84, 0x87, 0x82, 0x81,
    0x9B, 0x98, 0x9D, 0x9E, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8F, 0x8C, 0x89, 0x8A,
    0xAB, 0xA8, 0xAD, 0xAE, 0xA7, 0xA4, 0xA1, 0xA2, 0xB3, 0xB0, 0xB5, 0xB6, 0xBF, 0xBC, 0xB9, 0xBA,
    0xFB, 0xF8, 0xFD, 0xFE, 0xF7, 0xF4, 0xF1, 0xF2, 0xE3, 0xE0, 0xE5, 0xE6, 0xEF, 0xEC, 0xE9, 0xEA,
    0xCB, 0xC8, 0xCD, 0xCE, 0xC7, 0xC4, 0xC1, 0xC2, 0xD3, 0xD0, 0xD5, 0xD6, 0xDF, 0xDC, 0xD9, 0xDA,
    0x5B, 0x58, 0x5D, 0x5E, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4F, 0x4C, 0x49, 0x4A,
    0x6B, 0x68, 0x6D, 0x6E, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7F, 0x7C, 0x79, 0x7A,
    0x3B, 0x38, 0x3D, 0x3E, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2F, 0x2C, 0x29, 0x2A,
    0x0B, 0x08, 0x0D, 0x0E, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1F, 0x1C, 0x19, 0x1A
};

const uint8_t T_9[256] = {
    0x00,0x09,0x12,0x1B,0x24,0x2D,0x36,0x3F,0x48,0x41,0x5A,0x53,0x6C,0x65,0x7E,0x77,
    0x90,0x99,0x82,0x8B,0xB4,0xBD,0xA6,0xAF,0xD8,0xD1,0xCA,0xC3,0xFC,0xF5,0xEE,0xE7,
    0x3B,0x32,0x29,0x20,0x1F,0x16,0x0D,0x04,0x73,0x7A,0x61,0x68,0x57,0x5E,0x45,0x4C,
    0xAB,0xA2,0xB9,0xB0,0x8F,0x86,0x9D,0x94,0xE3,0xEA,0xF1,0xF8,0xC7,0xCE,0xD5,0xDC,
    0x76,0x7F,0x64,0x6D,0x52,0x5B,0x40,0x49,0x3E,0x37,0x2C,0x25,0x1A,0x13,0x08,0x01,
    0xE6,0xEF,0xF4,0xFD,0xC2,0xCB,0xD0,0xD9,0xAE,0xA7,0xBC,0xB5,0x8A,0x83,0x98,0x91,
    0x4D,0x44,0x5F,0x56,0x69,0x60,0x7B,0x72,0x05,0x0C,0x17,0x1E,0x21,0x28,0x33,0x3A,
    0xDD,0xD4,0xCF,0xC6,0xF9,0xF0,0xEB,0xE2,0x95,0x9C,0x87,0x8E,0xB1,0xB8,0xA3,0xAA,
    0xEC,0xE5,0xFE,0xF7,0xC8,0xC1,0xDA,0xD3,0xA4,0xAD,0xB6,0xBF,0x80,0x89,0x92,0x9B,
    0x7C,0x75,0x6E,0x67,0x58,0x51,0x4A,0x43,0x34,0x3D,0x26,0x2F,0x10,0x19,0x02,0x0B,
    0xD7,0xDE,0xC5,0xCC,0xF3,0xFA,0xE1,0xE8,0x9F,0x96,0x8D,0x84,0xBB,0xB2,0xA9,0xA0,
    0x47,0x4E,0x55,0x5C,0x63,0x6A,0x71,0x78,0x0F,0x06,0x1D,0x14,0x2B,0x22,0x39,0x30,
    0x9A,0x93,0x88,0x81,0xBE,0xB7,0xAC,0xA5,0xD2,0xDB,0xC0,0xC9,0xF6,0xFF,0xE4,0xED,
    0x0A,0x03,0x18,0x11,0x2E,0x27,0x3C,0x35,0x42,0x4B,0x50,0x59,0x66,0x6F,0x74,0x7D,
    0xA1,0xA8,0xB3,0xBA,0x85,0x8C,0x97,0x9E,0xE9,0xE0,0xFB,0xF2,0xCD,0xC4,0xDF,0xD6,
    0x31,0x38,0x23,0x2A,0x15,0x1C,0x07,0x0E,0x79,0x70,0x6B,0x62,0x5D,0x54,0x4F,0x46
};

const uint8_t T_b[256] = {
    0x00,0x0B,0x16,0x1D,0x2C,0x27,0x3A,0x31,0x58,0x53,0x4E,0x45,0x74,0x7F,0x62,0x69,
    0xB0,0xBB,0xA6,0xAD,0x9C,0x97,0x8A,0x81,0xE8,0xE3,0xFE,0xF5,0xC4,0xCF,0xD2,0xD9,
    0x7B,0x70,0x6D,0x66,0x57,0x5C,0x41,0x4A,0x23,0x28,0x35,0x3E,0x0F,0x04,0x19,0x12,
    0xCB,0xC0,0xDD,0xD6,0xE7,0xEC,0xF1,0xFA,0x93,0x98,0x85,0x8E,0xBF,0xB4,0xA9,0xA2,
    0xF6,0xFD,0xE0,0xEB,0xDA,0xD1,0xCC,0xC7,0xAE,0xA5,0xB8,0xB3,0x82,0x89,0x94,0x9F,
    0x46,0x4D,0x50,0x5B,0x6A,0x61,0x7C,0x77,0x1E,0x15,0x08,0x03,0x32,0x39,0x24,0x2F,
    0x8D,0x86,0x9B,0x90,0xA1,0xAA,0xB7,0xBC,0xD5,0xDE,0xC3,0xC8,0xF9,0xF2,0xEF,0xE4,
    0x3D,0x36,0x2B,0x20,0x11,0x1A,0x07,0x0C,0x65,0x6E,0x73,0x78,0x49,0x42,0x5F,0x54,
    0xF7,0xFC,0xE1,0xEA,0xDB,0xD0,0xCD,0xC6,0xAF,0xA4,0xB9,0xB2,0x83,0x88,0x95,0x9E,
    0x47,0x4C,0x51,0x5A,0x6B,0x60,0x7D,0x76,0x1F,0x14,0x09,0x02,0x33,0x38,0x25,0x2E,
    0x8C,0x87,0x9A,0x91,0xA0,0xAB,0xB6,0xBD,0xD4,0xDF,0xC2,0xC9,0xF8,0xF3,0xEE,0xE5,
    0x3C,0x37,0x2A,0x21,0x10,0x1B,0x06,0x0D,0x64,0x6F,0x72,0x79,0x48,0x43,0x5E,0x55,
    0x01,0x0A,0x17,0x1C,0x2D,0x26,0x3B,0x30,0x59,0x52,0x4F,0x44,0x75,0x7E,0x63,0x68,
    0xB1,0xBA,0xA7,0xAC,0x9D,0x96,0x8B,0x80,0xE9,0xE2,0xFF,0xF4,0xC5,0xCE,0xD3,0xD8,
    0x7A,0x71,0x6C,0x67,0x56,0x5D,0x40,0x4B,0x22,0x29,0x34,0x3F,0x0E,0x05,0x18,0x13,
    0xCA,0xC1,0xDC,0xD7,0xE6,0xED,0xF0,0xFB,0x92,0x99,0x84,0x8F,0xBE,0xB5,0xA8,0xA3
};

const uint8_t T_d[256] = {
    0x00,0x0D,0x1A,0x17,0x34,0x39,0x2E,0x23,0x68,0x65,0x72,0x7F,0x5C,0x51,0x46,0x4B,
    0xD0,0xDD,0xCA,0xC7,0xE4,0xE9,0xFE,0xF3,0xB8,0xB5,0xA2,0xAF,0x8C,0x81,0x96,0x9B,
    0xBB,0xB6,0xA1,0xAC,0x8F,0x82,0x95,0x98,0xD3,0xDE,0xC9,0xC4,0xE7,0xEA,0xFD,0xF0,
    0x6B,0x66,0x71,0x7C,0x5F,0x52,0x45,0x48,0x03,0x0E,0x19,0x14,0x37,0x3A,0x2D,0x20,
    0x6D,0x60,0x77,0x7A,0x59,0x54,0x43,0x4E,0x05,0x08,0x1F,0x12,0x31,0x3C,0x2B,0x26,
    0xBD,0xB0,0xA7,0xAA,0x89,0x84,0x93,0x9E,0xD5,0xD8,0xCF,0xC2,0xE1,0xEC,0xFB,0xF6,
    0xD6,0xDB,0xCC,0xC1,0xE2,0xEF,0xF8,0xF5,0xBE,0xB3,0xA4,0xA9,0x8A,0x87,0x90,0x9D,
    0x06,0x0B,0x1C,0x11,0x32,0x3F,0x28,0x25,0x6E,0x63,0x74,0x79,0x5A,0x57,0x40,0x4D,
    0xDA,0xD7,0xC0,0xCD,0xEE,0xE3,0xF4,0xF9,0xB2,0xBF,0xA8,0xA5,0x86,0x8B,0x9C,0x91,
    0x0A,0x07,0x10,0x1D,0x3E,0x33,0x24,0x29,0x62,0x6F,0x78,0x75,0x56,0x5B,0x4C,0x41,
    0x61,0x6C,0x7B,0x76,0x55,0x58,0x4F,0x42,0x09,0x04,0x13,0x1E,0x3D,0x30,0x27,0x2A,
    0xB1,0xBC,0xAB,0xA6,0x85,0x88,0x9F,0x92,0xD9,0xD4,0xC3,0xCE,0xED,0xE0,0xF7,0xFA,
    0xB7,0xBA,0xAD,0xA0,0x83,0x8E,0x99,0x94,0xDF,0xD2,0xC5,0xC8,0xEB,0xE6,0xF1,0xFC,
    0x67,0x6A,0x7D,0x70,0x53,0x5E,0x49,0x44,0x0F,0x02,0x15,0x18,0x3B,0x36,0x21,0x2C,
    0x0C,0x01,0x16,0x1B,0x38,0x35,0x22,0x2F,0x64,0x69,0x7E,0x73,0x50,0x5D,0x4A,0x47,
    0xDC,0xD1,0xC6,0xCB,0xE8,0xE5,0xF2,0xFF,0xB4,0xB9,0xAE,0xA3,0x80,0x8D,0x9A,0x97
};

const uint8_t T_e[256] = {
    0x00,0x0E,0x1C,0x12,0x38,0x36,0x24,0x2A,0x70,0x7E,0x6C,0x62,0x48,0x46,0x54,0x5A,
    0xE0,0xEE,0xFC,0xF2,0xD8,0xD6,0xC4,0xCA,0x90,0x9E,0x8C,0x82,0xA8,0xA6,0xB4,0xBA,
    0xDB,0xD5,0xC7,0xC9,0xE3,0xED,0xFF,0xF1,0xAB,0xA5,0xB7,0xB9,0x93,0x9D,0x8F,0x81,
    0x3B,0x35,0x27,0x29,0x03,0x0D,0x1F,0x11,0x4B,0x45,0x57,0x59,0x73,0x7D,0x6F,0x61,
    0xAD,0xA3,0xB1,0xBF,0x95,0x9B,0x89,0x87,0xDD,0xD3,0xC1,0xCF,0xE5,0xEB,0xF9,0xF7,
    0x4D,0x43,0x51,0x5F,0x75,0x7B,0x69,0x67,0x3D,0x33,0x21,0x2F,0x05,0x0B,0x19,0x17,
    0x76,0x78,0x6A,0x64,0x4E,0x40,0x52,0x5C,0x06,0x08,0x1A,0x14,0x3E,0x30,0x22,0x2C,
    0x96,0x98,0x8A,0x84,0xAE,0xA0,0xB2,0xBC,0xE6,0xE8,0xFA,0xF4,0xDE,0xD0,0xC2,0xCC,
    0x41,0x4F,0x5D,0x53,0x79,0x77,0x65,0x6B,0x31,0x3F,0x2D,0x23,0x09,0x07,0x15,0x1B,
    0xA1,0xAF,0xBD,0xB3,0x99,0x97,0x85,0x8B,0xD1,0xDF,0xCD,0xC3,0xE9,0xE7,0xF5,0xFB,
    0x9A,0x94,0x86,0x88,0xA2,0xAC,0xBE,0xB0,0xEA,0xE4,0xF6,0xF8,0xD2,0xDC,0xCE,0xC0,
    0x7A,0x74,0x66,0x68,0x42,0x4C,0x5E,0x50,0x0A,0x04,0x16,0x18,0x32,0x3C,0x2E,0x20,
    0xEC,0xE2,0xF0,0xFE,0xD4,0xDA,0xC8,0xC6,0x9C,0x92,0x80,0x8E,0xA4,0xAA,0xB8,0xB6,
    0x0C,0x02,0x10,0x1E,0x34,0x3A,0x28,0x26,0x7C,0x72,0x60,0x6E,0x44,0x4A,0x58,0x56,
    0x37,0x39,0x2B,0x25,0x0F,0x01,0x13,0x1D,0x47,0x49,0x5B,0x55,0x7F,0x71,0x63,0x6D,
    0xD7,0xD9,0xCB,0xC5,0xEF,0xE1,0xF3,0xFD,0xA7,0xA9,0xBB,0xB5,0x9F,0x91,0x83,0x8D
};




// Global 4-bit XOR LUT [a][b] = a ^ b (16x16)
uint8_t xor_lut_16x16[16][16];

void init_xor_lut_16x16() {
    for (int a = 0; a < 16; ++a) {
        for (int b = 0; b < 16; ++b) {
            xor_lut_16x16[a][b] = a ^ b;
        }
    }
}

LweSample* tree_based_lut_eval_bit(
    const std::vector<LweSample*>& selector,  // Encrypted 8-bit (a<<4|b)
    const uint8_t* lut,                       // 256-entry 1-bit LUT
    const TFheGateBootstrappingSecretKeySet* key) {

    const TFheGateBootstrappingParameterSet* params = key->params;
    std::vector<LweSample*> current_level(256);

    // Encrypt LUT bits
    for (int i = 0; i < 256; ++i) {
        current_level[i] = new_gate_bootstrapping_ciphertext(params);
        bootsSymEncrypt(current_level[i], lut[i], key);
    }

    // Tree reduction (8 levels for 8-bit selector)
    for (int level = 0; level < 8; ++level) {
        std::vector<LweSample*> next_level(current_level.size() / 2);
        for (size_t i = 0; i < next_level.size(); ++i) {
            next_level[i] = new_gate_bootstrapping_ciphertext(params);
            bootsMUX(
                next_level[i],
                selector[level],  // Use LSB-first instead of 7-level
                current_level[2 * i + 1],
                current_level[2 * i],
                &key->cloud
            );
            delete_gate_bootstrapping_ciphertext(current_level[2 * i]);
            delete_gate_bootstrapping_ciphertext(current_level[2 * i + 1]);
        }
        current_level = std::move(next_level);
    }

    return current_level[0];  // Final result
}


std::vector<LweSample*> evaluate_4bit_xor_lut(
    const std::vector<LweSample*>& a4, const std::vector<LweSample*>& b4,
    const TFheGateBootstrappingSecretKeySet* key) {

    const TFheGateBootstrappingParameterSet* params = key->params;

    std::vector<LweSample*> selector(8);  // a (MSBs) || b (LSBs)

    // Combine a and b into 8-bit selector: selector = (a << 4) | b
    for (int i = 0; i < 4; ++i) {
        selector[i] = new_LweSample(params->in_out_params);
        bootsCOPY(selector[i], b4[i], &key->cloud);  // LSB
    }
    for (int i = 0; i < 4; ++i) {
        selector[4 + i] = new_LweSample(params->in_out_params);
        bootsCOPY(selector[4 + i], a4[i], &key->cloud);  // MSB
    }

    // Evaluate each output bit (4 bits for 4-bit XOR result)
    std::vector<LweSample*> result(4);
    for (int bit = 0; bit < 4; ++bit) {
        uint8_t lut_bitwise[256];
        for (int i = 0; i < 256; ++i) {
            int a = (i >> 4) & 0xF;
            int b = i & 0xF;
            lut_bitwise[i] = (xor_lut_16x16[a][b] >> bit) & 1;
        }

        result[bit] = tree_based_lut_eval_bit(selector, lut_bitwise, key);
    }

    // Clean up
    for (auto& s : selector) delete_LweSample(s);

    return result;
}

std::vector<LweSample*> homomorphic_xor_tree_based(
    const std::vector<LweSample*>& a,
    const std::vector<LweSample*>& b,
    TFheGateBootstrappingSecretKeySet* key) {

    if (a.size() != 8 || b.size() != 8) {
        throw std::runtime_error("Input must be 8 bits");
    }

    // Initialize LUT once
    static bool lut_initialized = false;
    if (!lut_initialized) {
        init_xor_lut_16x16();
        lut_initialized = true;
    }

    // Split into nibbles
    std::vector<LweSample*> a_low(a.begin(), a.begin() + 4);
    std::vector<LweSample*> a_high(a.begin() + 4, a.end());
    std::vector<LweSample*> b_low(b.begin(), b.begin() + 4);
    std::vector<LweSample*> b_high(b.begin() + 4, b.end());

    // Compute 4-bit XORs
    std::vector<LweSample*> xor_low = evaluate_4bit_xor_lut(a_low, b_low, key);
    std::vector<LweSample*> xor_high = evaluate_4bit_xor_lut(a_high, b_high, key);

    // Combine results
    std::vector<LweSample*> result(8);
    for (int i = 0; i < 4; ++i) {
        result[i] = xor_low[i];      // Bits 0-3 (LSB first)
        result[4 + i] = xor_high[i]; // Bits 4-7
    }
    
    // const Torus32 MU = 1 << 29;  // typical Torus32 value representing binary 1
    // for (auto& bit : result) {
    //     LweSample* refreshed = new_gate_bootstrapping_ciphertext(key->cloud.params);
    //     tfhe_bootstrap_woKS(refreshed, key->cloud.bk, MU, bit);
    //     delete_gate_bootstrapping_ciphertext(bit);
    //     bit = refreshed;
    // }

    return result;
}



std::vector<LweSample*> eval_mul_T_a(const uint8_t table[256],  std::vector<LweSample*>& input_bits, TFheGateBootstrappingSecretKeySet* key) {

    // Evaluate using tree-based method (fully homomorphic)
    std::vector<LweSample*> result = tree_based_lut_eval(input_bits, table, &key->cloud);

    // Convert std::vector<LweSample*> to LweSample** for consistency
    std::vector<LweSample*> result_ptr (8);
    for (int i = 0; i < 8; ++i) {
        result_ptr[i] = result[i];
    }

    return result_ptr;
}


std::vector<LweSample*> mul_2(std::vector<LweSample*>& b,  TFheGateBootstrappingSecretKeySet* key) {
    return eval_mul_T_a(T_2, b, key);
}
std::vector<LweSample*> mul_3(std::vector<LweSample*>& b,  TFheGateBootstrappingSecretKeySet* key) {
    return eval_mul_T_a(T_3, b, key);
}
std::vector<LweSample*> mul_9(std::vector<LweSample*>& b,  TFheGateBootstrappingSecretKeySet* key) {
    return eval_mul_T_a(T_9, b, key);
}
std::vector<LweSample*> mul_b(std::vector<LweSample*>& b,  TFheGateBootstrappingSecretKeySet* key) {
    return eval_mul_T_a(T_b, b, key);
}
std::vector<LweSample*> mul_d(std::vector<LweSample*>& b,  TFheGateBootstrappingSecretKeySet* key) {
    return eval_mul_T_a(T_d, b, key);
}
std::vector<LweSample*> mul_e(std::vector<LweSample*>& b,  TFheGateBootstrappingSecretKeySet* key) {
    return eval_mul_T_a(T_e, b, key);
}


void trivial_encrypt(LweSample* out, int32_t value, const TFheGateBootstrappingSecretKeySet* key) {
    lweSymEncrypt(out, value ? 1 : 0, 0.01, key->lwe_key);
}

void trivial_decrypt(const LweSample* in, const TFheGateBootstrappingSecretKeySet* key, int32_t& out) {
    Torus32 phase = lweSymDecrypt(in, key->lwe_key, 2);
    out = (phase > 0); // Convert Torus32 to binary result
}

std::pair<TFheGateBootstrappingSecretKeySet*, const TFheGateBootstrappingCloudKeySet*> generate_keys() {
    TFheGateBootstrappingParameterSet* params = new_default_gate_bootstrapping_parameters(110);
    uint32_t seed[] = {314, 1592, 657};
    tfhe_random_generator_setSeed(seed, 3);
    TFheGateBootstrappingSecretKeySet* sk = new_random_gate_bootstrapping_secret_keyset(params);
    return std::make_pair(sk, &sk->cloud);
}

std::vector<LweSample*> encrypt_byte(uint8_t byte, const TFheGateBootstrappingSecretKeySet* key) {
    std::vector<LweSample*> encrypted(8);
    for (int i = 0; i < 8; i++) {
        encrypted[i] = new_gate_bootstrapping_ciphertext(key->params);
        bootsSymEncrypt(encrypted[i], (byte >> i) & 1, key);
    }
    return encrypted;
}

uint8_t decrypt_byte(const std::vector<LweSample*>& encrypted, const TFheGateBootstrappingSecretKeySet* key) {
    uint8_t result = 0;
    for (int i = 0; i < 8; i++) {
        int bit = bootsSymDecrypt(encrypted[i], key);
        result |= (bit << i);
    }
    return result;
}


std::vector<LweSample*> apply_lut_8bit_to_8bit(const std::vector<LweSample*>& input, const uint8_t lut[256], const TFheGateBootstrappingCloudKeySet* bk) {
    assert(input.size() == 8); // input must be 8 bits

    const int bit_size = 8;
    const auto* params = bk->params;

    // Allocate output (8 encrypted bits)
    std::vector<LweSample*> encrypted_output(bit_size);
    for (int bit = 0; bit < bit_size; ++bit) {
        encrypted_output[bit] = new_gate_bootstrapping_ciphertext(params);
        bootsCONSTANT(encrypted_output[bit], 0, bk); // initialize to 0
    }

    // Iterate over all 256 possible input byte values
    for (int value = 0; value < 256; ++value) {
        // Check if input == value (bitwise comparison)
        LweSample* is_match = new_gate_bootstrapping_ciphertext(params);
        bootsCONSTANT(is_match, 1, bk); // Start with true (1)

        for (int bit = 0; bit < bit_size; ++bit) {
            int bit_value = (value >> bit) & 1;

            LweSample* bit_check = new_gate_bootstrapping_ciphertext(params);
            if (bit_value == 0) {
                bootsNOT(bit_check, input[bit], bk); // want 0
            } else {
                bootsCOPY(bit_check, input[bit], bk); // want 1
            }

            LweSample* temp = new_gate_bootstrapping_ciphertext(params);
            bootsAND(temp, is_match, bit_check, bk); // is_match &= (input[bit] == bit_value)
            bootsCOPY(is_match, temp, bk);

            delete_gate_bootstrapping_ciphertext(bit_check);
            delete_gate_bootstrapping_ciphertext(temp);
        }

        // Get output byte corresponding to this value from the LUT
        uint8_t output_byte = lut[value];

        // Conditionally XOR output bits with the result if match
        for (int bit = 0; bit < bit_size; ++bit) {
            int output_bit = (output_byte >> bit) & 1;
            if (output_bit) {
                LweSample* temp = new_gate_bootstrapping_ciphertext(params);
                bootsXOR(temp, encrypted_output[bit], is_match, bk);
                bootsCOPY(encrypted_output[bit], temp, bk);
                delete_gate_bootstrapping_ciphertext(temp);
            }
        }

        delete_gate_bootstrapping_ciphertext(is_match);
    }

    return encrypted_output;
}
